---
title: 25 years of open&nbsp;source forecasting&nbsp;software
author: Rob J Hyndman
date: 26 June 2025
toc: true
format:
  presentation-beamer:
    pdf-engine: pdflatex
    knitr:
      opts_chunk:
        dev: "CairoPDF"
    keep-tex: true
    fig-width: 8
    fig-height: 4.3
    template-partials:
      - before-title.tex
highlight-style: tango
execute:
  echo: false
  message: false
  warning: false
  cache: false
---

```{r}
#| label: load-packages
library(ggplot2)
library(kableExtra)
library(targets)
library(fpp3)
library(forecast)
library(smooth)

options(digits = 4, width = 80)
ggplot2::theme_set(
  theme_get() + theme(text = element_text(family = "Fira Sans"))
)
```

# R

## Early R forecasting (c.2000)
\fontsize{14}{17}\sf

`ts` package (now `stats` package):

* `HoltWinters()`: point forecasts only, with optional multiplicative seasonality (written by David Meyer).
* `arima()`: state space formulation of ARIMA models\newline (written by Brian Ripley).
* `structTS()`: Basic structural models as per Harvey\newline (written by Brian Ripley).

\pause

###
* Each had a `predict()` method, but output was inconsistent.
* `HoltWinters` did not produce prediction intervals.

## forecast package for R: motivation

* Consistent output for existing methods by introducing new S3 generic `forecast()` and new S3 class `forecast`.
* New methods including `ets()`, `thetaf()`, `auto.arima()`.
* Modelling functions can be swapped while leaving code unchanged.
* Easy plotting tools with new `plot.forecast()` method.
* New forecasting tools such as `accuracy()` calculations.

## forecast package for R: history
\fontsize{13}{14}\sf\vspace*{-0.5cm}

```{r}
#| label: table1
tar_read(table1)
```

## forecast package for R: history
\fontsize{13}{14}\sf\vspace*{-0.5cm}

```{r}
#| label: table2
tar_read(table2)
```

\vspace*{10cm}

## forecast package for R
\fontsize{13}{14}\sf\vspace*{-0.2cm}

* `auto.arima` + `forecast`
* `ets` + `forecast`
* `tbats` + `forecast`
* `bats` + `forecast`
* `arfima` + `forecast`
* `nnetar` + `forecast`
* `stlm` + `forecast`
* `meanf`
* `rwf`, `naive`
* `thetaf`
* `dshw`, `hw`, `holt`, `ses`
* `splinef`
* `croston`

\fontsize{14}{16}\sf
\begin{textblock}{5}(9,1.5)
\begin{block}{}
All produce an object of class \texttt{forecast}
\end{block}
\end{textblock}

\only<2>{\begin{textblock}{5}(9,3.8)
\begin{block}{}
\textbf{v9.0} will have new model functions:
\begin{itemize}\tightlist
\item \texttt{mean\_model()}
\item \texttt{rw\_model()}
\item \texttt{theta\_model()}
\item \texttt{spline\_model()}
\item \texttt{croston\_model}
\end{itemize}
\end{block}
\end{textblock}}


## CRAN Task View Time Series

\placefig{-0.3}{1.2}{width=16.7cm, trim=0 0 0 40, clip=true}{figs/ctvts.pdf}

## Top ten downloaded forecasting packages on CRAN
\fontsize{13}{15}\sf\tabcolsep=0cm\vspace*{-0.5cm}

```{r}
tar_read(top_ten_table)
```

\placefig{10.75}{1.5}{width=2.5cm}{forecast.png}
\placefig{13.25}{1.5}{width=2.5cm}{fable.png}

\placefig{9.5}{3.65}{width=2.5cm}{hts.png}
\placefig{12}{3.65}{width=2.5cm}{thief.png}

\placefig{10.75}{5.8}{width=2.5cm}{smooth.png}
\placefig{13.25}{5.8}{width=2.5cm}{greybox.png}


## Top ten downloaded forecasting packages on CRAN

```{r}
tar_read(plot2a)
```

## Top ten downloaded forecasting packages on CRAN

```{r}
tar_read(plot2b)
```

## Top ten downloaded forecasting packages on CRAN

```{r}
tar_read(plot2c)
```

## ETS

```{r}
tibble(
  Function = c(
    "stats::HoltWinters()",
    "forecast::ets()",
    "fable::ETS()",
    "smooth::es()"
  ),
  PIntervals = c("No", "Yes", "Yes", "Yes"),
  Automatic = c("No", "Yes", "Yes", "Yes"),
  Covariates = c("No", "No", "No", "Yes")
) |>
  mutate(Function = paste0("\\texttt{", Function, "}")) |>
  kbl(booktabs = TRUE, format = "latex", escape = FALSE, align = "llll")
```

## forecast::ets()

```{r}
#| echo: true
ets(AirPassengers)
```

## forecast::ets()

```{r}
#| echo: true
ets(AirPassengers) |> forecast(h = 10)
```

## fable::ETS()

```{r}
#| echo: true
as_tsibble(AirPassengers) |> model(ETS(value)) |> report()
```

## fable::ETS()

```{r}
#| echo: true
as_tsibble(AirPassengers) |> model(ETS(value)) |> forecast(h = 10)
```

## smooth::es()

```{r}
#| echo: true
es(AirPassengers)
```

## smooth::es()

```{r}
#| echo: true
es(AirPassengers) |> forecast(h = 10, interval = "parametric")
```

## Benchmarks

```r
bench::mark(
  forecast = ets(AirPassengers) |> forecast(h = 10),
  fable = as_tsibble(AirPassengers) |> model(ETS(value)) |> forecast(h = 10),
  smooth = es(AirPassengers) |> forecast(h = 10, interval = "parametric"),
  check = FALSE
)
```

\vspace*{-0.2cm}


```{r}
tar_read(ets_benchmark)
```

## ARIMA

```{r}
tibble(
  Function = c(
    "stats::arima()",
    "forecast::Arima()",
    "forecast::auto.arima()",
    "fable::ARIMA()",
    "smooth::ssarima()",
    "smooth::auto.ssarima()"
  ),
  PIntervals = "Yes",
  Automatic = c("No", "No", "Yes", "Yes", "No", "Yes"),
  Covariates = "Yes",
) |>
  mutate(Function = paste0("\\texttt{", Function, "}")) |>
  kbl(
    booktabs = TRUE,
    format = "latex",
    escape = FALSE,
    align = "llll",
    linesep = ""
  )
```

## forecast::auto.arima()

```{r}
#| echo: true
auto.arima(AirPassengers, lambda = 0)
```

## forecast::auto.arima()

```{r}
#| echo: true
auto.arima(AirPassengers, lambda = 0) |> forecast(h = 10)
```

## fable::ARIMA()

```{r}
#| echo: true
as_tsibble(AirPassengers) |> model(ARIMA(log(value))) |> report()
```

## fable::ARIMA()

```{r}
#| echo: true
as_tsibble(AirPassengers) |> model(ARIMA(log(value))) |> forecast(h = 10)
```

## smooth::auto.ssarima()

```{r}
#| echo: true
auto.ssarima(log(AirPassengers))
```

## smooth::auto.ssarima()

```{r}
#| echo: true
auto.ssarima(log(AirPassengers)) |> forecast(h = 10)
```

## Benchmarks

```r
bench::mark(
  forecast = auto.arima(AirPassengers, lambda = 0, biasadj = TRUE) |>
    forecast(h = 12),
  fable = as_tsibble(AirPassengers) |> model(ARIMA(log(value))) |>
    forecast(h = 12),
  smooth = auto.ssarima(log(AirPassengers)) |>
    forecast(h = 12, interval="parametric"),
  check = FALSE
)
```

\vspace*{-0.3cm}\fontsize{13}{13}\sf


```{r}
tar_read(arima_benchmark)
```

## R reconciliation packages
\vspace*{-0.4cm}\fontsize{13}{14}\sf

```{r}
tar_read(r_reco_table)
```


# Python

## Python packages with statistical models

* `statsmodels` (2016--2024)
* `pmdarima` (2017--2023)
* `sktime` (2019--2025) --- includes wrapper to `pmdarima` and to some `StatsForecast` functions
* `GluonTS` (AWS, 2019--2025) --- via wrapper to R forecast package
* `Darts` (2020--2025) --- some wrappers to `StatsForecast`
* `Merlion` (Salesforce, 2021--2023)
* `StatsForecast` (Nixtla 2022--2025)
* `aeon` (2023--2025) --- fork of `sktime`

\begin{textblock}{3.6}(11.7,1.2)\begin{block}{}(Release dates)\end{block}\end{textblock}

## Pypi downloads

```{r}
tar_read(pypi_graph1)
```

## Pypi downloads

```{r}
tar_read(pypi_graph2)
```

## Most complete packages

:::: {.columns}


:::  {.column width="40%"}

### `statsmodels`

* ARIMA (not automated)
* ETS (not automated)
* MSTL
* Theta
* Regime switching
* ARDL
* ECM
* VARMA

:::

:::  {.column width="30%"}

### `sktime`

* AutoARIMA
* AutoETS
* BATS/TBATS
* Theta
* STLForecaster
* Croston
* Bagged-ETS
* Prophet

:::
:::  {.column width="30%"}

### `StatsForecast`

* AutoARIMA
* AutoETS
* AutoTBATS
* Theta
* MSTL
* Croston
* TSB, ADIDA
* ARCH/GARCH

:::
::::

## Python packages with ML methods
\fontsize{14}{16}\sf

* `aeon` (2023--2025) --- fork of `sktime`
* `Darts` (2020--2025)
* `GluonTS` (AWS, 2019--2025)
* `Kats` (2021--2022)
* `Merlion` (Salesforce, 2021--2023)
* `MLforecast` (Nixtla 2022--2025)
* `NeuralForecast` (Nixtla 2022--2025)
* `NeuralProphet` (2020--2024)
* `pytorch-forecasting` (2020--2025)
* `skforecast` (2021--2025)
* `sktime` (2019--2025)

\begin{textblock}{3.6}(11.7,1.2)\begin{block}{}(Release dates)\end{block}\end{textblock}

## ML forecasting methods available in `GluonTS`
\vspace*{-0.25cm}
\begin{multicols}{2}
\begin{itemize}\tightlist
\item \texttt{Deep Renewal Processes}
\item \texttt{DeepAR}
\item \texttt{DeepFactor}
\item \texttt{DeepNPTS}
\item \texttt{DeepState}
\item \texttt{DeepTPP}
\item \texttt{DeepVAR}
\item \texttt{DeepVARHierarchical}
\item \texttt{GPForecaster}
\item \texttt{GPVAR}
\item \texttt{LSTNet}
\item \texttt{MQ-CNN}
\item \texttt{MQ-RNN}
\item \texttt{MQF2}
\item \texttt{N-BEATS}
\item \texttt{Rotbaum}
\item \texttt{SimpleFeedForward}
\item \texttt{Temporal Fusion Transformer}
\item \texttt{Transformer}
\item \texttt{WaveNet}
\end{itemize}
\end{multicols}

## Forecasting methods available in `NeuralForecast`

\begin{textblock}{15}(0,1)
\begin{multicols}{3}
\begin{itemize}\tightlist
\item \texttt{Autoformer}
\item \texttt{BiTCN}
\item \texttt{DeepAR}
\item \texttt{DeepNPTS}
\item \texttt{DilatedRNN}
\item \texttt{FEDformer}
\item \texttt{GRU}
\item \texttt{HINT}
\item \texttt{Informer}
\item \texttt{iTransformer}
\item \texttt{KAN}
\item \texttt{LSTM}
\item \texttt{MLP}
\item \texttt{MLP\rlap{Multivariate}}
\item \texttt{NBEATS}
\item \texttt{NBEATSx}
\item \texttt{NHITS}
\item \texttt{NLinear}
\item \texttt{PatchTST}
\item \texttt{RNN}
\item \texttt{SOFTS}a
\item \texttt{StemGNN}
\item \texttt{TCN}
\item \texttt{TFT}
\item \texttt{TiDE}
\item \texttt{TimeMixer}
\item \texttt{TimeLLM}
\item \texttt{TimesNet}
\item \texttt{TSMixer}
\item \texttt{TSMixerx}
\item \texttt{Vanilla\rlap{Transformer}}
\end{itemize}
\end{multicols}
\end{textblock}


## Python reconciliation packages
\vspace*{-0.4cm}\fontsize{13}{14}\sf

```{r}
tar_read(py_reco_table)
```

## Foundation models

* Time-LLM (Jin et al. 2023)
* TimeGPT-1 (Garza, Challu, and Mergenthaler-Canseco 2023)
* **Lag-Llama** (Rasul et al. 2023)
* TimesFM (Das et al. 2023)
* Tiny Time Mixers (Ekambaram et al. 2024)
* Moirai (Woo et al. 2024)
* MOMENT (Goswami et al. 2024)
* UniTS (Gao et al. 2024)
* Chronos (Ansari et al. 2024)
* Time-MoE (Shi et al, 2024)

\begin{textblock}{3.}(12,1)\begin{block}{}\textbf{Open source}\end{block}\end{textblock}


# Julia
## Julia

* **`colintbowers/RARIMA.jl`**: 2015--2018. Wrapper for R packages `stats` and `forecast`. No longer working
* **`josemanuel22/DeepAR.jl`**: 2024--2025. DeepAR models.
* **`LAMPSPUC/Sarimax.jl`**: 2024--2025. SARIMA using JuMP.
* **`LAMPSPUC/ScoreDrivenModels.jl`**: 2020--2022. Generalized AR score models.
* **`LAMPSPUC/StateSpaceModels.jl`**: 2018--2025. Based on Durbin & Koopman (2012).
* **`viraltux/Forecast.jl`**: 2020--2021. Descriptive stats and plots, but only AR forecasting.

# Data

## forecastingdata.org

\placefig{0}{1.1}{width=16cm}{figs/forecastingdata.png}

# Books

## Forecasting: principles and practice

\placefig{0}{1.1}{width=16cm}{figs/OTexts.png}
\begin{textblock}{2.8}(12.5,0)\begin{block}{}\tt OTexts.com\end{block}\end{textblock}
\begin{textblock}{3}(1.2,8.2)\begin{block}{}\fontsize{8}{9}\sf 1st ed 2013; 2nd ed 2018\end{block}\end{textblock}
\begin{textblock}{1.4}(7.5,8.2)\begin{block}{}\fontsize{8}{9}\sf 3rd ed 2021\end{block}\end{textblock}
\begin{textblock}{0.6}(13.2,8.2)\begin{block}{}\fontsize{8}{9}\sf 2025\end{block}\end{textblock}

## Forecasting and analytics with ADAM

\placefig{0}{1.1}{height=8cm}{figs/ADAM-Cover-web}
\begin{textblock}{5.6}(6.5,2)\begin{block}{}\tt openforecast.org/adam/\end{block}\end{textblock}

## Links

\begin{textblock}{7.6}(4.2,3.6)
\begin{alertblock}{}
\fontsize{18}{22}\sf\bfseries\centering
\href{https://robjhyndman.com/osfs25}{robjhyndman.com/osfs25}
\end{alertblock}
\end{textblock}


\begin{textblock}{7.6}(4.2,5.6)
\begin{block}{}
\fontsize{18}{22}\sf\bfseries\centering
\href{https://robjhyndman.com/postdoc}{robjhyndman.com/postdoc}
\end{block}
\end{textblock}
