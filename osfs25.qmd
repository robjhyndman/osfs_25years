---
title: 25 years of open source forecasting software
author: Rob J Hyndman
date: 26 June 2025
toc: true
format:
  presentation-beamer:
    pdf-engine: pdflatex
    knitr:
      opts_chunk:
        dev: "CairoPDF"
    keep-tex: true
    fig-width: 8
    fig-height: 4.3
highlight-style: tango
execute:
  echo: false
  message: false
  warning: false
  cache: false
---

```{r}
#| label: load-packages
library(ggplot2)
library(kableExtra)
library(targets)
library(fpp3)
library(forecast)
library(smooth)

options(
  digits = 4,
  width = 90,
  ggplot2.continuous.colour = "viridis",
  ggplot2.continuous.fill = "viridis",
  ggplot2.discrete.colour = c(
    "#D55E00",
    "#0072B2",
    "#009E73",
    "#CC79A7",
    "#E69F00",
    "#56B4E9",
    "#F0E442"
  ),
  ggplot2.discrete.fill = c(
    "#D55E00",
    "#0072B2",
    "#009E73",
    "#CC79A7",
    "#E69F00",
    "#56B4E9",
    "#F0E442"
  )
)
ggplot2::theme_set(
  theme_get() + theme(text = element_text(family = "Fira Sans"))
)
```

# R

## Early R forecasting (c.2000)
\fontsize{14}{17}\sf

`ts` package (now `stats` package):

* `HoltWinters()`: point forecasts only, with optional multiplicative seasonality (written by David Meyer).
* `arima()`: state space formulation of ARIMA models\newline (written by Brian Ripley).
* `structTS()`: Basic structural models as per Harvey\newline (written by Brian Ripley).

\pause

###
* Each had a `predict()` method, but output was inconsistent.
* `HoltWinters` did not produce prediction intervals.

## forecast package for R

* Consistent output for existing methods by introducting new S3 generic `forecast()` and new S3 class `forecast`.
* Add new methods including `ets()`, `thetaf()`, `auto.arima()`.
* Modelling functions should be able to be swapped while leaving code unchanged.
* Easy plotting tools with new `plot.forecast()` method.
* Add forecasting tools such as `accuracy()` calculations.

## forecast package for R
\fontsize{13}{14}\sf\vspace*{-0.5cm}

```{r}
#| label: table1
tar_read(table1)
```

## forecast package for R
\fontsize{13}{14}\sf\vspace*{-0.5cm}

```{r}
#| label: table2
tar_read(table2)
```

\vspace*{10cm}

## forecast package for R

```{r}
#| label: plot1
tar_read(plot1)
```

## forecast package for R
\fontsize{13}{14}\sf\vspace*{-0.2cm}

* `auto.arima` + `forecast`
* `ets` + `forecast`
* `tbats` + `forecast`
* `bats` + `forecast`
* `arfima` + `forecast`
* `nnetar` + `forecast`
* `stlm` + `forecast`
* `meanf`
* `rwf`, `naive`
* `thetaf`
* `dshw`, `hw`, `holt`, `ses`
* `splinef`
* `croston`

\fontsize{14}{16}\sf
\begin{textblock}{5}(9,1.5)
\begin{block}{}
All produce an object of class \texttt{forecast}
\end{block}
\end{textblock}

\only<2>{\begin{textblock}{5}(9,3.8)
\begin{block}{}
\textbf{v9.0} will have new model functions:
\begin{itemize}\tightlist
\item \texttt{mean\_model()}
\item \texttt{rw\_model()}
\item \texttt{theta\_model()}
\item \texttt{spline\_model()}
\item \texttt{croston\_model}
\end{itemize}
\end{block}
\end{textblock}}


## CRAN Task View Time Series

\placefig{-0.3}{1.2}{width=16.7cm, trim=0 0 0 40, clip=true}{figs/ctvts.pdf}

## Top ten downloaded forecasting packages on CRAN
\fontsize{13}{15}\sf\tabcolsep=0cm\vspace*{-0.5cm}

```{r}
tar_read(top_ten_table)
```

\placefig{10.75}{1.5}{width=2.5cm}{forecast.png}
\placefig{13.25}{1.5}{width=2.5cm}{fable.png}

\placefig{9.5}{3.65}{width=2.5cm}{hts.png}
\placefig{12}{3.65}{width=2.5cm}{thief.png}

\placefig{10.75}{5.8}{width=2.5cm}{smooth.png}
\placefig{13.25}{5.8}{width=2.5cm}{greybox.png}


## Top ten downloaded forecasting packages on CRAN

```{r}
tar_read(plot2)
```

## Top ten downloaded forecasting packages on CRAN

```{r}
tar_read(plot3)
```

## ETS

```{r}
tibble(
  Function = c(
    "stats::HoltWinters()",
    "forecast::ets()",
    "fable::ETS()",
    "smooth::es()"
  ),
  PIntervals = c("No", "Yes", "Yes", "Yes"),
  Automatic = c("No", "Yes", "Yes", "Yes"),
  Covariates = c("No", "No", "No", "Yes")
) |>
  mutate(Function = paste0("\\texttt{", Function, "}")) |>
  kbl(booktabs = TRUE, format = "latex", escape = FALSE, align = "llll")
```

## forecast::ets()

```{r}
#| echo: true
ets(AirPassengers)
```

## forecast::ets()

```{r}
#| echo: true
ets(AirPassengers) |> forecast(h = 10)
```

## fable::ETS()

```{r}
#| echo: true
as_tsibble(AirPassengers) |>
  model(ets = ETS(value)) |>
  report()
```

## fable::ETS()

```{r}
#| echo: true
as_tsibble(AirPassengers) |>
  model(ets = ETS(value)) |>
  forecast(h = 10)
```

## smooth::es()

```{r}
#| echo: true
es(AirPassengers)
```

## smooth::es()

```{r}
#| echo: true
es(AirPassengers) |> forecast(h = 10, interval = "parametric")
```

## Benchmarks

```r
bench::mark(
  forecast = ets(AirPassengers) |> forecast(h = 10),
  fable = as_tsibble(AirPassengers) |> model(ETS(value)) |> forecast(h = 10),
  smooth = es(AirPassengers) |> forecast(h = 10, interval = "parametric"),
  check = FALSE
)
```

\vspace*{-0.2cm}


```{r}
tar_read(ets_benchmark)
```

## ARIMA

```{r}
tibble(
  Function = c(
    "stats::arima()",
    "forecast::Arima()",
    "forecast::auto.arima()",
    "fable::ARIMA()",
    "smooth::ssarima()",
    "smooth::auto.ssarima()"
  ),
  PIntervals = "Yes",
  Automatic = c("No", "No", "Yes", "Yes", "No", "Yes"),
  Covariates = "Yes",
) |>
  mutate(Function = paste0("\\texttt{", Function, "}")) |>
  kbl(booktabs = TRUE, format = "latex", escape = FALSE, align = "llll", linesep = "")
```

## forecast::auto.arima()

```{r}
#| echo: true
auto.arima(AirPassengers, lambda = 0)
```

## forecast::auto.arima()

```{r}
#| echo: true
auto.arima(AirPassengers, lambda = 0) |> forecast(h = 10)
```

## fable::ARIMA()

```{r}
#| echo: true
as_tsibble(AirPassengers) |>
  model(arima = ARIMA(log(value))) |>
  report()
```

## fable::ARIMA()

```{r}
#| echo: true
as_tsibble(AirPassengers) |>
  model(arima = ARIMA(log(value))) |>
  forecast(h = 10)
```

## smooth::auto.ssarima()

```{r}
#| echo: true
auto.ssarima(log(AirPassengers))
```

## smooth::auto.ssarima()

```{r}
#| echo: true
auto.ssarima(log(AirPassengers)) |> forecast(h = 10)
```

## Benchmarks

```r
bench::mark(
  forecast = auto.arima(AirPassengers, lambda = 0, biasadj = TRUE) |>
    forecast(h = 12),
  fable = as_tsibble(AirPassengers) |> model(ARIMA(log(value))) |>
    forecast(h = 12),
  smooth = auto.ssarima(log(AirPassengers)) |>
    forecast(h = 12, interval="parametric"),
  check = FALSE
)
```

\vspace*{-0.3cm}\fontsize{13}{13}\sf


```{r}
tar_read(arima_benchmark)
```

# Python

## Python packages

* `pmdarima`
* `sktime`
* Nixtla: `statsforecast`, `hierarchicalforecast`
* `GluonTS`
* `Merlion`
* `statsmodels`,
* `pyhts`
* `Darts`

# Julia
## Julia

* `forecast`
